/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Worksheet as PrismaWorksheet,
  Question as PrismaQuestion,
  Teacher as PrismaTeacher,
} from "@prisma/client";

export class WorksheetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorksheetCountArgs, "select">
  ): Promise<number> {
    return this.prisma.worksheet.count(args);
  }

  async worksheets(
    args: Prisma.WorksheetFindManyArgs
  ): Promise<PrismaWorksheet[]> {
    return this.prisma.worksheet.findMany(args);
  }
  async worksheet(
    args: Prisma.WorksheetFindUniqueArgs
  ): Promise<PrismaWorksheet | null> {
    return this.prisma.worksheet.findUnique(args);
  }
  async createWorksheet(
    args: Prisma.WorksheetCreateArgs
  ): Promise<PrismaWorksheet> {
    return this.prisma.worksheet.create(args);
  }
  async updateWorksheet(
    args: Prisma.WorksheetUpdateArgs
  ): Promise<PrismaWorksheet> {
    return this.prisma.worksheet.update(args);
  }
  async deleteWorksheet(
    args: Prisma.WorksheetDeleteArgs
  ): Promise<PrismaWorksheet> {
    return this.prisma.worksheet.delete(args);
  }

  async findQuestions(
    parentId: string,
    args: Prisma.QuestionFindManyArgs
  ): Promise<PrismaQuestion[]> {
    return this.prisma.worksheet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questions(args);
  }

  async getTeacher(parentId: string): Promise<PrismaTeacher | null> {
    return this.prisma.worksheet
      .findUnique({
        where: { id: parentId },
      })
      .teacher();
  }
}
