/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Worksheet } from "./Worksheet";
import { WorksheetCountArgs } from "./WorksheetCountArgs";
import { WorksheetFindManyArgs } from "./WorksheetFindManyArgs";
import { WorksheetFindUniqueArgs } from "./WorksheetFindUniqueArgs";
import { CreateWorksheetArgs } from "./CreateWorksheetArgs";
import { UpdateWorksheetArgs } from "./UpdateWorksheetArgs";
import { DeleteWorksheetArgs } from "./DeleteWorksheetArgs";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { Teacher } from "../../teacher/base/Teacher";
import { WorksheetService } from "../worksheet.service";
@graphql.Resolver(() => Worksheet)
export class WorksheetResolverBase {
  constructor(protected readonly service: WorksheetService) {}

  async _worksheetsMeta(
    @graphql.Args() args: WorksheetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Worksheet])
  async worksheets(
    @graphql.Args() args: WorksheetFindManyArgs
  ): Promise<Worksheet[]> {
    return this.service.worksheets(args);
  }

  @graphql.Query(() => Worksheet, { nullable: true })
  async worksheet(
    @graphql.Args() args: WorksheetFindUniqueArgs
  ): Promise<Worksheet | null> {
    const result = await this.service.worksheet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Worksheet)
  async createWorksheet(
    @graphql.Args() args: CreateWorksheetArgs
  ): Promise<Worksheet> {
    return await this.service.createWorksheet({
      ...args,
      data: {
        ...args.data,

        teacher: args.data.teacher
          ? {
              connect: args.data.teacher,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Worksheet)
  async updateWorksheet(
    @graphql.Args() args: UpdateWorksheetArgs
  ): Promise<Worksheet | null> {
    try {
      return await this.service.updateWorksheet({
        ...args,
        data: {
          ...args.data,

          teacher: args.data.teacher
            ? {
                connect: args.data.teacher,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Worksheet)
  async deleteWorksheet(
    @graphql.Args() args: DeleteWorksheetArgs
  ): Promise<Worksheet | null> {
    try {
      return await this.service.deleteWorksheet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Question], { name: "questions" })
  async findQuestions(
    @graphql.Parent() parent: Worksheet,
    @graphql.Args() args: QuestionFindManyArgs
  ): Promise<Question[]> {
    const results = await this.service.findQuestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Teacher, {
    nullable: true,
    name: "teacher",
  })
  async getTeacher(
    @graphql.Parent() parent: Worksheet
  ): Promise<Teacher | null> {
    const result = await this.service.getTeacher(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
