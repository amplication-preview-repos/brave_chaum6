/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorksheetService } from "../worksheet.service";
import { WorksheetCreateInput } from "./WorksheetCreateInput";
import { Worksheet } from "./Worksheet";
import { WorksheetFindManyArgs } from "./WorksheetFindManyArgs";
import { WorksheetWhereUniqueInput } from "./WorksheetWhereUniqueInput";
import { WorksheetUpdateInput } from "./WorksheetUpdateInput";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { QuestionWhereUniqueInput } from "../../question/base/QuestionWhereUniqueInput";

export class WorksheetControllerBase {
  constructor(protected readonly service: WorksheetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Worksheet })
  async createWorksheet(
    @common.Body() data: WorksheetCreateInput
  ): Promise<Worksheet> {
    return await this.service.createWorksheet({
      data: {
        ...data,

        teacher: data.teacher
          ? {
              connect: data.teacher,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,

        teacher: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Worksheet] })
  @ApiNestedQuery(WorksheetFindManyArgs)
  async worksheets(@common.Req() request: Request): Promise<Worksheet[]> {
    const args = plainToClass(WorksheetFindManyArgs, request.query);
    return this.service.worksheets({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,

        teacher: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Worksheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async worksheet(
    @common.Param() params: WorksheetWhereUniqueInput
  ): Promise<Worksheet | null> {
    const result = await this.service.worksheet({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,

        teacher: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Worksheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorksheet(
    @common.Param() params: WorksheetWhereUniqueInput,
    @common.Body() data: WorksheetUpdateInput
  ): Promise<Worksheet | null> {
    try {
      return await this.service.updateWorksheet({
        where: params,
        data: {
          ...data,

          teacher: data.teacher
            ? {
                connect: data.teacher,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,

          teacher: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Worksheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorksheet(
    @common.Param() params: WorksheetWhereUniqueInput
  ): Promise<Worksheet | null> {
    try {
      return await this.service.deleteWorksheet({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,

          teacher: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questions")
  @ApiNestedQuery(QuestionFindManyArgs)
  async findQuestions(
    @common.Req() request: Request,
    @common.Param() params: WorksheetWhereUniqueInput
  ): Promise<Question[]> {
    const query = plainToClass(QuestionFindManyArgs, request.query);
    const results = await this.service.findQuestions(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        text: true,
        typeField: true,
        updatedAt: true,

        worksheet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questions")
  async connectQuestions(
    @common.Param() params: WorksheetWhereUniqueInput,
    @common.Body() body: QuestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questions: {
        connect: body,
      },
    };
    await this.service.updateWorksheet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questions")
  async updateQuestions(
    @common.Param() params: WorksheetWhereUniqueInput,
    @common.Body() body: QuestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questions: {
        set: body,
      },
    };
    await this.service.updateWorksheet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questions")
  async disconnectQuestions(
    @common.Param() params: WorksheetWhereUniqueInput,
    @common.Body() body: QuestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questions: {
        disconnect: body,
      },
    };
    await this.service.updateWorksheet({
      where: params,
      data,
      select: { id: true },
    });
  }
}
